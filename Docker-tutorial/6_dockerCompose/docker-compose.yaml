version: "3.8"
services: 
  # service name 'mongodb' can be used in code for connections inside Docker Engine
  mongodb:
    container_name: mongodb-goals
    # Use either image: (pull image) OR build: (using Dockerfile)
    # image: 'mongo'
    build:
      context: ./mongodb
      dockerfile: mongodb.Dockerfile
    volumes: 
      # A microservice may have multiple volumes
      # Named volume for MongoDB
      - ./data:/data/db
    ports:
      - "27017:27017"    
    env_file: 
      - ./env/mongo.env

    # We may specify a docker network, yet it auto-creates for us like a bundle
    #networks:
    # - networkName

  backend:
    #image: 'node'
    container_name: node-goals
    build:
      context: ./backend
      dockerfile: nodejs.Dockerfile
      args:
        BACKEND_PORT: 3001
    working_dir: /app
    command: npm start
    ports:
      - '3001:3001'
    volumes: 
      - logs:/app/logs # Named Volume
      - ./backend:/app # Bind Mount - Sharing everything in 'backend' folder to docker backend container
      - /app/node_modules # Anonymous Volumes
    env_file:
      - ./env/backend.env
    depends_on:
      - mongodb

  frontend:
    #image: 'node'
    container_name: react-goals
    build:
      context: ./frontend
      dockerfile: react.Dockerfile
    volumes:
      # Bind Mount
      - ./frontend/src:/app/src
    command: npm start
    ports:
      - '3000:3000'
    # docker run -it interactive mode
    stdin_open: true # frontend needs an open input connection
    tty: true #
    depends_on:
      - backend

# Named volumes parallel to services indentation level
# Anonymous Volumes & Bind Mounts are NOT specified here
volumes:
  data:
  logs:
